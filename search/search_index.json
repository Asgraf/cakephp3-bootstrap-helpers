{
    "docs": [
        {
            "location": "/",
            "text": "Dependencies\n\n\nThis repository contains a set of \nhelpers\n that will help you combine \nCakePHP\n and \nBootstrap\n.\nThese helpers do not require any dependencies except the two obvious ones:\n\n\n\n\nCakePHP 3.x\n The helpers have been developped since CakePHP 3 beta, and will be kept up to date\nwith the current CakePHP developpment.\n\n\nBootstrap\n The helpers currently work with Bootstrap 3, but will be updated soon to\nwork with Bootstrap 4.\n\n\n\n\nInstallation\n\n\nComposer\nManual\nSince v3, CakePHP uses \ncomposer\n, the easiest way to set up the Bootstrap helpers is by either running:\n\n\ncomposer require holt59/cakephp3-bootstrap-helpers:dev-master\n\n\n\n\nor adding the following to your \ncomposer.json\n and run \ncomposer update\n:\n\n\n\"require\": {\n    \"holt59/cakephp3-bootstrap-helpers\": \"dev-master\"\n}\n\n\n\n\nDo not forget to load the plugin by adding the following line into your /config/bootstrap.php file:\n\n\nPlugin::load('Bootstrap');\n\n\n\n\nIf you do not use \ncomposer\n, simply clone the repository into a \nplugins/Bootstrap\n folder by running:\n\n\ngit clone https://github.com/Holt59/cakephp3-bootstrap-helpers.git plugins/Bootstrap\n\n\n\n\nAnd then load the plugin with autoload set to true in your \nconfig/bootstrap.php\n file:\n\n\nPlugin::load('Bootstrap' ['autoload' => true]);\n\n\n\n\nUsing the helpers\n\n\nOnce the plugin is loaded, you need to enable them:\n\n\n// In your AppController class for instance:\npublic $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form'\n    ],\n    'Html' => [\n        'className' => 'Bootstrap.Html'\n    ],\n    'Modal' => [\n        'className' => 'Bootstrap.Modal'\n    ],\n    'Navbar' => [\n        'className' => 'Bootstrap.Navbar'\n    ],\n    'Paginator' => [\n        'className' => 'Bootstrap.Paginator'\n    ],\n    'Panel' => [\n        'className' => 'Bootstrap.Panel'\n    ]\n];\n\n\n\n\nIf you are using a version prior to 3.1.2, add the \nBootstrap\n prefix to the class, e.g.:\n\n\npublic $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.BootstrapForm'\n    ]\n];\n\n\n\n\nYou should be careful when mixing the Bootstrap helpers with other helpers, see the \nFAQ\n.\nDo not forget to add the bootstrap style and script files to your view (e.g. in \nLayout/default.ctp\n):\n\n\necho $this->Html->css('https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css');\necho $this->Html->script([\n    'https://code.jquery.com/jquery-1.12.4.min.js',\n    'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js'\n]);\n\n\n\n\nSee \nCakePHP documentation\n for more information on how to enable helpers in your\ncontrollers (especially if you want to use the default CakePHP helpers together with these helpers).",
            "title": "Getting Started"
        },
        {
            "location": "/#dependencies",
            "text": "This repository contains a set of  helpers  that will help you combine  CakePHP  and  Bootstrap .\nThese helpers do not require any dependencies except the two obvious ones:   CakePHP 3.x  The helpers have been developped since CakePHP 3 beta, and will be kept up to date\nwith the current CakePHP developpment.  Bootstrap  The helpers currently work with Bootstrap 3, but will be updated soon to\nwork with Bootstrap 4.",
            "title": "Dependencies"
        },
        {
            "location": "/#installation",
            "text": "Composer Manual Since v3, CakePHP uses  composer , the easiest way to set up the Bootstrap helpers is by either running:  composer require holt59/cakephp3-bootstrap-helpers:dev-master  or adding the following to your  composer.json  and run  composer update :  \"require\": {\n    \"holt59/cakephp3-bootstrap-helpers\": \"dev-master\"\n}  Do not forget to load the plugin by adding the following line into your /config/bootstrap.php file:  Plugin::load('Bootstrap');  If you do not use  composer , simply clone the repository into a  plugins/Bootstrap  folder by running:  git clone https://github.com/Holt59/cakephp3-bootstrap-helpers.git plugins/Bootstrap  And then load the plugin with autoload set to true in your  config/bootstrap.php  file:  Plugin::load('Bootstrap' ['autoload' => true]);",
            "title": "Installation"
        },
        {
            "location": "/#using-the-helpers",
            "text": "Once the plugin is loaded, you need to enable them:  // In your AppController class for instance:\npublic $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form'\n    ],\n    'Html' => [\n        'className' => 'Bootstrap.Html'\n    ],\n    'Modal' => [\n        'className' => 'Bootstrap.Modal'\n    ],\n    'Navbar' => [\n        'className' => 'Bootstrap.Navbar'\n    ],\n    'Paginator' => [\n        'className' => 'Bootstrap.Paginator'\n    ],\n    'Panel' => [\n        'className' => 'Bootstrap.Panel'\n    ]\n];  If you are using a version prior to 3.1.2, add the  Bootstrap  prefix to the class, e.g.:  public $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.BootstrapForm'\n    ]\n];  You should be careful when mixing the Bootstrap helpers with other helpers, see the  FAQ .\nDo not forget to add the bootstrap style and script files to your view (e.g. in  Layout/default.ctp ):  echo $this->Html->css('https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css');\necho $this->Html->script([\n    'https://code.jquery.com/jquery-1.12.4.min.js',\n    'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js'\n]);  See  CakePHP documentation  for more information on how to enable helpers in your\ncontrollers (especially if you want to use the default CakePHP helpers together with these helpers).",
            "title": "Using the helpers"
        },
        {
            "location": "/form-helper/basics/",
            "text": "Create a Bootstrap form\n\n\nBootstrap form are created using the standard CakePHP way of creating forms (the \nForm\n helper should be\ncorrectly configured, see \nInstallation\n:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->create();\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;\n\n\n\n\n<form method=\"post\" accept-charset=\"utf-8\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\" control-label\" for=\"username\">Username</label>\n        <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n    </div>\n    <div class=\"form-group password\">\n        <label class=\" control-label\"  for=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n    </div>\n    <div class=\"form-group\">\n        <div class=\"checkbox\">\n            <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n            <label for=\"remember\"><input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">Remember</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n    </div>\n</form>\n\n\n\n\n\n    \n\n        \n\n    \n\n    \n\n        \nUsername\n\n        \n\n    \n\n    \n\n        \nPassword\n\n        \n\n    \n\n    \n\n        \n\n            \n\n            \nRemember",
            "title": "Basic usage"
        },
        {
            "location": "/form-helper/basics/#create-a-bootstrap-form",
            "text": "Bootstrap form are created using the standard CakePHP way of creating forms (the  Form  helper should be\ncorrectly configured, see  Installation :  PHP Markup Output echo $this->Form->create();\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;  <form method=\"post\" accept-charset=\"utf-8\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\" control-label\" for=\"username\">Username</label>\n        <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n    </div>\n    <div class=\"form-group password\">\n        <label class=\" control-label\"  for=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n    </div>\n    <div class=\"form-group\">\n        <div class=\"checkbox\">\n            <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n            <label for=\"remember\"><input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">Remember</label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n    </div>\n</form>  \n     \n         \n     \n     \n         Username \n         \n     \n     \n         Password \n         \n     \n     \n         \n             \n             Remember",
            "title": "Create a Bootstrap form"
        },
        {
            "location": "/form-helper/horizontal/",
            "text": "Creating an horizontal\n\n\nYou can create Bootstrap \nhorizontal forms\n quite easily:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->create(null, ['horizontal' => true]);\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;\n\n\n\n\n<form method=\"post\" accept-charset=\"utf-8\" class=\"form-horizontal\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\"  for=\"username\">Username</label>\n        <div class=\"col-md-6\">\n            <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n        </div>\n    </div>\n    <div class=\"form-group password\">\n        <label class=\"col-md-2 control-label\"  for=\"password\">Password</label>\n        <div class=\"col-md-6\">\n            <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-md-offset-2 col-md-6\">\n            <div class=\"checkbox\">\n                <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n                <label for=\"remember\">\n                    <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">\n                    Remember\n                </label>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-md-offset-2 col-md-6\">\n            <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n        </div>\n    </div>\n</form>\n\n\n\n\n\n    \n\n        \n\n    \n\n    \n\n        \nUsername\n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \nPassword\n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n                    \n\n                    Remember\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nSpecifying the width of the columns\n\n\nYou can change the widths of the columns at any time and specify different widths for different\ndisplay sizes using \nsetConfig\n:\n\n\nPHP\nMarkup\nOutput\n$this->Form->setConfig('columns', [\n    'sm' => [\n        'label' => 4,\n        'input' => 4,\n        'error' => 4\n    ],\n    'md' => [\n        'label' => 2,\n        'input' => 6,\n        'error' => 4\n    ]\n]);\necho $this->Form->create(null, ['horizontal' => true]);\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;\n\n\n\n\n<form method=\"post\" accept-charset=\"utf-8\" class=\"form-horizontal\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-sm-4 col-md-2 control-label\"  for=\"username\">Username</label>\n        <div class=\"col-sm-4 col-md-6\">\n            <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n        </div>\n    </div>\n    <div class=\"form-group password\">\n        <label class=\"col-sm-4 col-md-2 control-label\"  for=\"password\">Password</label>\n        <div class=\"col-sm-4 col-md-6\">\n            <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-md-offset-2 col-sm-4 col-md-6\">\n            <div class=\"checkbox\">\n                <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n                <label for=\"remember\">\n                    <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">\n                    Remember\n                </label>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-md-offset-2 col-sm-4 col-md-6\">\n            <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n        </div>\n    </div>\n</form>\n\n\n\n\n\n    \n\n        \n\n    \n\n    \n\n        \nUsername\n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \nPassword\n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n                    \n\n                    Remember\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n        \n\n    \n\n\n\n\n\nYou can set the default column widths when configuring the helper:\n\n\npublic $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form',\n        'columns' => [\n            'sm' => [\n                'label' => 4,\n                'input' => 4,\n                'error' => 4\n            ],\n            'md' => [\n                'label' => 2,\n                'input' => 6,\n                'error' => 4\n            ]\n        ]\n    ]\n];\n\n\n\n\nNon horizontal input inside horizontal form\n\n\nIt is possible to create a non-horizontal input inside an horizontal form, for instance to avoid compatibility\nissue for various plugins. To do so, simply set the \nhorizontal\n attribute to \nfalse\n before the input, and\nreset it to \ntrue\n after:\n\n\nPHP\nMarkup\nOutput\n<?php\n    echo $this->Form->create(NULL, ['horizontal' => true]) ;\n    echo $this->Form->input('horizontal_1');\n    echo $this->Form->horizontal = false;\n    echo $this->Form->input('non_horizontal');\n    echo $this->Form->horizontal = true;\n    echo $this->Form->input('horizontal_2');\n    echo $this->Form->end() ;\n?>\n\n\n\n\n\n\n<form accept-charset=\"utf-8\" action=\"#\" class=\"form-horizontal\" method=\"post\">\n    <div style=\"display:none;\">\n        <input class=\"form-control\" name=\"_method\" type=\"hidden\" value=\"POST\">\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\" for=\"horizontal-1\">Horizontal 1</label>\n        <div class=\"col-md-6\">\n            <input class=\"form-control\" id=\"horizontal-1\" name=\"horizontal_1\" type=\"text\">\n        </div>\n    </div>\n    <div class=\"form-group text\">\n        <label class=\" control-label\" for=\"non-horizontal\">Non Horizontal</label>\n        <input class=\"form-control\" id=\"non-horizontal\" name=\"non_horizontal\" type=\"text\">\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\" for=\"horizontal-2\">Horizontal 2</label>\n        <div class=\"col-md-6\">\n            <input class=\"form-control\" id=\"horizontal-2\" name=\"horizontal_2\" type=\"text\">\n        </div>\n    </div>\n</form>\n\n\n\n\n\n    \n\n        \n\n    \n\n    \n\n        \nHorizontal 1\n\n        \n\n            \n\n        \n\n    \n\n    \n\n        \nNon Horizontal\n\n        \n\n    \n\n    \n\n        \nHorizontal 2",
            "title": "Horizontal forms"
        },
        {
            "location": "/form-helper/horizontal/#creating-an-horizontal",
            "text": "You can create Bootstrap  horizontal forms  quite easily:  PHP Markup Output echo $this->Form->create(null, ['horizontal' => true]);\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;  <form method=\"post\" accept-charset=\"utf-8\" class=\"form-horizontal\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\"  for=\"username\">Username</label>\n        <div class=\"col-md-6\">\n            <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n        </div>\n    </div>\n    <div class=\"form-group password\">\n        <label class=\"col-md-2 control-label\"  for=\"password\">Password</label>\n        <div class=\"col-md-6\">\n            <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-md-offset-2 col-md-6\">\n            <div class=\"checkbox\">\n                <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n                <label for=\"remember\">\n                    <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">\n                    Remember\n                </label>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-md-offset-2 col-md-6\">\n            <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n        </div>\n    </div>\n</form>  \n     \n         \n     \n     \n         Username \n         \n             \n         \n     \n     \n         Password \n         \n             \n         \n     \n     \n         \n             \n                 \n                 \n                     \n                    Remember",
            "title": "Creating an horizontal"
        },
        {
            "location": "/form-helper/horizontal/#specifying-the-width-of-the-columns",
            "text": "You can change the widths of the columns at any time and specify different widths for different\ndisplay sizes using  setConfig :  PHP Markup Output $this->Form->setConfig('columns', [\n    'sm' => [\n        'label' => 4,\n        'input' => 4,\n        'error' => 4\n    ],\n    'md' => [\n        'label' => 2,\n        'input' => 6,\n        'error' => 4\n    ]\n]);\necho $this->Form->create(null, ['horizontal' => true]);\necho $this->Form->input('username', ['type' => 'text']) ;\necho $this->Form->input('password', ['type' => 'password']) ;\necho $this->Form->input('remember', ['type' => 'checkbox']) ;\necho $this->Form->submit('Log In') ;\necho $this->Form->end() ;  <form method=\"post\" accept-charset=\"utf-8\" class=\"form-horizontal\" role=\"form\" action=\"#\">\n    <div style=\"display:none;\">\n        <input type=\"hidden\" name=\"_method\" class=\"form-control \"  value=\"POST\" />\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-sm-4 col-md-2 control-label\"  for=\"username\">Username</label>\n        <div class=\"col-sm-4 col-md-6\">\n            <input type=\"text\" name=\"username\" class=\"form-control \"  id=\"username\" />\n        </div>\n    </div>\n    <div class=\"form-group password\">\n        <label class=\"col-sm-4 col-md-2 control-label\"  for=\"password\">Password</label>\n        <div class=\"col-sm-4 col-md-6\">\n            <input type=\"password\" name=\"password\" class=\"form-control \"  id=\"password\" />\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-md-offset-2 col-sm-4 col-md-6\">\n            <div class=\"checkbox\">\n                <input type=\"hidden\" name=\"remember\" class=\"form-control \"  value=\"0\" />\n                <label for=\"remember\">\n                    <input type=\"checkbox\" name=\"remember\" value=\"1\" id=\"remember\">\n                    Remember\n                </label>\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-md-offset-2 col-sm-4 col-md-6\">\n            <input type=\"submit\" class=\"btn btn-default\" value=\"Log In\">\n        </div>\n    </div>\n</form>  \n     \n         \n     \n     \n         Username \n         \n             \n         \n     \n     \n         Password \n         \n             \n         \n     \n     \n         \n             \n                 \n                 \n                     \n                    Remember\n                 \n             \n         \n     \n     \n         \n             \n         \n       You can set the default column widths when configuring the helper:  public $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form',\n        'columns' => [\n            'sm' => [\n                'label' => 4,\n                'input' => 4,\n                'error' => 4\n            ],\n            'md' => [\n                'label' => 2,\n                'input' => 6,\n                'error' => 4\n            ]\n        ]\n    ]\n];",
            "title": "Specifying the width of the columns"
        },
        {
            "location": "/form-helper/horizontal/#non-horizontal-input-inside-horizontal-form",
            "text": "It is possible to create a non-horizontal input inside an horizontal form, for instance to avoid compatibility\nissue for various plugins. To do so, simply set the  horizontal  attribute to  false  before the input, and\nreset it to  true  after:  PHP Markup Output <?php\n    echo $this->Form->create(NULL, ['horizontal' => true]) ;\n    echo $this->Form->input('horizontal_1');\n    echo $this->Form->horizontal = false;\n    echo $this->Form->input('non_horizontal');\n    echo $this->Form->horizontal = true;\n    echo $this->Form->input('horizontal_2');\n    echo $this->Form->end() ;\n?>  \n\n<form accept-charset=\"utf-8\" action=\"#\" class=\"form-horizontal\" method=\"post\">\n    <div style=\"display:none;\">\n        <input class=\"form-control\" name=\"_method\" type=\"hidden\" value=\"POST\">\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\" for=\"horizontal-1\">Horizontal 1</label>\n        <div class=\"col-md-6\">\n            <input class=\"form-control\" id=\"horizontal-1\" name=\"horizontal_1\" type=\"text\">\n        </div>\n    </div>\n    <div class=\"form-group text\">\n        <label class=\" control-label\" for=\"non-horizontal\">Non Horizontal</label>\n        <input class=\"form-control\" id=\"non-horizontal\" name=\"non_horizontal\" type=\"text\">\n    </div>\n    <div class=\"form-group text\">\n        <label class=\"col-md-2 control-label\" for=\"horizontal-2\">Horizontal 2</label>\n        <div class=\"col-md-6\">\n            <input class=\"form-control\" id=\"horizontal-2\" name=\"horizontal_2\" type=\"text\">\n        </div>\n    </div>\n</form>  \n     \n         \n     \n     \n         Horizontal 1 \n         \n             \n         \n     \n     \n         Non Horizontal \n         \n     \n     \n         Horizontal 2",
            "title": "Non horizontal input inside horizontal form"
        },
        {
            "location": "/form-helper/custom-file-inputs/",
            "text": "Custom file inputs\n\n\nBoostrap (until v3) does not customize the file inputs, so you can choose to customize them with the \nBootstrap.FormHelper\n. To do\nso, enable the feature in the helper configuration:\n\n\npublic $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form',\n        'useCustomFileInput' => true\n    ]\n];\n\n\n\n\nYour file inputs will now look much better:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->file('file');\n\n\n\n\n<input type=\"file\" name=\"file\"  id=\"file\" style=\"display: none;\" onchange=\"document.getElementById('file-input').value = this.files[0].name;\">\n<div class=\"input-group\">\n    <div class=\"input-group-btn\">\n        <button type=\"button\" onclick=\"document.getElementById('file').click();\" class=\"btn btn-default\">Choose File</button>\n    </div>\n    <input type=\"text\" name=\"file\" class=\"form-control \"  id=\"file-input\" readonly=\"readonly\" onclick=\"document.getElementById('file').click();\" />\n</div>\n\n\n\n\n\n\n\n    \n\n        \nChoose File\n\n    \n\n    \n\n\n\n\nCustomizing the custom file input\n\n\nNot satisfied with the output? You can customize the custom file input by using the \n_button\n and \n_input\n options:\n\n\n$this->Form->file('file', [\n    '_button' => ['class' => 'my-custom-button-class'],\n    '_input' => ['data-attr' => 'my-data-attr', 'class' => 'my-input-class']\n]);\n\n\n\n\nNote:\n Some attributes cannot be overriden:\n\n\n\n\nFor \n_button\n, the \ntype\n and \nonclick\n attributes.\n\n\nFor \n_input\n, the \nreadonly\n, \nonclick\n and \nid\n attributes.\n\n\n\n\nThe classes specified in the \n_button\n and \n_input\n options will be added to the list of default classes for the custom input.",
            "title": "Custom file inputs"
        },
        {
            "location": "/form-helper/custom-file-inputs/#custom-file-inputs",
            "text": "Boostrap (until v3) does not customize the file inputs, so you can choose to customize them with the  Bootstrap.FormHelper . To do\nso, enable the feature in the helper configuration:  public $helpers = [\n    'Form' => [\n        'className' => 'Bootstrap.Form',\n        'useCustomFileInput' => true\n    ]\n];  Your file inputs will now look much better:  PHP Markup Output echo $this->Form->file('file');  <input type=\"file\" name=\"file\"  id=\"file\" style=\"display: none;\" onchange=\"document.getElementById('file-input').value = this.files[0].name;\">\n<div class=\"input-group\">\n    <div class=\"input-group-btn\">\n        <button type=\"button\" onclick=\"document.getElementById('file').click();\" class=\"btn btn-default\">Choose File</button>\n    </div>\n    <input type=\"text\" name=\"file\" class=\"form-control \"  id=\"file-input\" readonly=\"readonly\" onclick=\"document.getElementById('file').click();\" />\n</div>   \n     \n         Choose File",
            "title": "Custom file inputs"
        },
        {
            "location": "/form-helper/custom-file-inputs/#customizing-the-custom-file-input",
            "text": "Not satisfied with the output? You can customize the custom file input by using the  _button  and  _input  options:  $this->Form->file('file', [\n    '_button' => ['class' => 'my-custom-button-class'],\n    '_input' => ['data-attr' => 'my-data-attr', 'class' => 'my-input-class']\n]);  Note:  Some attributes cannot be overriden:   For  _button , the  type  and  onclick  attributes.  For  _input , the  readonly ,  onclick  and  id  attributes.   The classes specified in the  _button  and  _input  options will be added to the list of default classes for the custom input.",
            "title": "Customizing the custom file input"
        },
        {
            "location": "/form-helper/buttons-et-al/",
            "text": "Bootstrap buttons\n\n\nButton groups\n\n\nYou can create \nbutton groups\n using the \nBootstrap.FormHelper\n:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->buttonGroup([$this->Form->button('1'), $this->Form->button('2')]) ;\n\n\n\n\n<div class=\"btn-group\">\n    <button class=\"btn btn-default\" type=\"submit\">1</button>\n    <button class=\"btn btn-default\" type=\"submit\">2</button>\n</div>\n\n\n\n\n\n    \n1\n\n    \n2\n\n\n\n\n\nButton toolbars\n\n\nYou can create \nbutton toolbars\n using the \nBootstrap.FormHelper\n by\ncombining multiple button groups:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->buttonToolbar([\n    $this->Form->buttonGroup([$this->Form->button('1'), $this->Form->button('2')]),\n    $this->Form->buttonGroup([$this->Form->button('3'), $this->Form->button('4')])\n]) ;\n\n\n\n\n<div class=\"btn-toolbar\">\n    <div class=\"btn-group\">\n        <button class=\"btn btn-default\" type=\"submit\">1</button>\n        <button class=\"btn btn-default\" type=\"submit\">2</button>\n    </div>\n    <div class=\"btn-group\">\n        <button class=\"btn btn-default\" type=\"submit\">3</button>\n        <button class=\"btn btn-default\" type=\"submit\">4</button>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \n1\n\n        \n2\n\n    \n\n    \n\n        \n3\n\n        \n4\n\n    \n\n\n\n\n\nDropdown buttons\n\n\nYou can create \ndropdown buttons\n using the \nBootstrap.FormHelper\n:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->dropdownButton('My Dropdown', [\n    $this->Html->link('Link 1', '#'),\n    $this->Html->link('Link 2', '#'),\n    'divider',\n    $this->Html->link('Link 3', '#')\n]);\n\n\n\n\n<div class=\"btn-group\">\n    <button data-toggle=\"dropdown\" class=\"dropdown-toggle btn btn-default\">My Dropdown <span class=\"caret\"></span></button>\n    <ul class=\"dropdown-menu\">\n        <li><a href=\"#\">Link 1</a></li>\n        <li><a href=\"#\">Link 2</a></li>\n        <li class=\"divider\"></li>\n        <li><a href=\"#\">Link 3</a></li>\n    </ul>\n</div>\n\n\n\n\n\n    \nMy Dropdown \n\n    \n\n        \nLink 1\n\n        \nLink 2\n\n        \n\n        \nLink 3",
            "title": "Buttons, Groups & Toolbars"
        },
        {
            "location": "/form-helper/buttons-et-al/#bootstrap-buttons",
            "text": "",
            "title": "Bootstrap buttons"
        },
        {
            "location": "/form-helper/buttons-et-al/#button-groups",
            "text": "You can create  button groups  using the  Bootstrap.FormHelper :  PHP Markup Output echo $this->Form->buttonGroup([$this->Form->button('1'), $this->Form->button('2')]) ;  <div class=\"btn-group\">\n    <button class=\"btn btn-default\" type=\"submit\">1</button>\n    <button class=\"btn btn-default\" type=\"submit\">2</button>\n</div>  \n     1 \n     2",
            "title": "Button groups"
        },
        {
            "location": "/form-helper/buttons-et-al/#button-toolbars",
            "text": "You can create  button toolbars  using the  Bootstrap.FormHelper  by\ncombining multiple button groups:  PHP Markup Output echo $this->Form->buttonToolbar([\n    $this->Form->buttonGroup([$this->Form->button('1'), $this->Form->button('2')]),\n    $this->Form->buttonGroup([$this->Form->button('3'), $this->Form->button('4')])\n]) ;  <div class=\"btn-toolbar\">\n    <div class=\"btn-group\">\n        <button class=\"btn btn-default\" type=\"submit\">1</button>\n        <button class=\"btn btn-default\" type=\"submit\">2</button>\n    </div>\n    <div class=\"btn-group\">\n        <button class=\"btn btn-default\" type=\"submit\">3</button>\n        <button class=\"btn btn-default\" type=\"submit\">4</button>\n    </div>\n</div>  \n     \n         1 \n         2 \n     \n     \n         3 \n         4",
            "title": "Button toolbars"
        },
        {
            "location": "/form-helper/buttons-et-al/#dropdown-buttons",
            "text": "You can create  dropdown buttons  using the  Bootstrap.FormHelper :  PHP Markup Output echo $this->Form->dropdownButton('My Dropdown', [\n    $this->Html->link('Link 1', '#'),\n    $this->Html->link('Link 2', '#'),\n    'divider',\n    $this->Html->link('Link 3', '#')\n]);  <div class=\"btn-group\">\n    <button data-toggle=\"dropdown\" class=\"dropdown-toggle btn btn-default\">My Dropdown <span class=\"caret\"></span></button>\n    <ul class=\"dropdown-menu\">\n        <li><a href=\"#\">Link 1</a></li>\n        <li><a href=\"#\">Link 2</a></li>\n        <li class=\"divider\"></li>\n        <li><a href=\"#\">Link 3</a></li>\n    </ul>\n</div>  \n     My Dropdown  \n     \n         Link 1 \n         Link 2 \n         \n         Link 3",
            "title": "Dropdown buttons"
        },
        {
            "location": "/form-helper/new-input-options/",
            "text": "Prepend or append content to inputs\n\n\nYou can prepend and append add-ons or buttons to inputs using custom options of the \nBootstrap.FormHelper::input\n method.\n\n\nPHP\nMarkup\nOutput\necho $this->Form->input('mail', [\n    'prepend' => '@',\n    'append' => $this->Form->button('Send')\n]) ;\n\n\n\n\n<div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <div class=\"input-group\">\n        <span class=\"input-group-addon\">@</span>\n        <input type=\"text\" name=\"mail\" class=\"form-control \" id=\"mail\" />\n        <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Send</button>\n        </span>\n    </div>\n</div>\n\n\n\n\n\n    \nMail\n\n    \n\n        \n@\n\n        \n\n        \n\n            \nSend\n\n        \n\n    \n\n\n\n\n\nAdd dropdown buttons\n\n\nYou can easily prepend or append dropdown buttons to inputs by using custom options of the \nBootstrap.FormHelper::input\n method\ncombined with the \nBootstrap.FormHelper::dropdown\n method.\n\n\nPHP\nMarkup\nOutput\necho $this->Form->input('mail', [\n    'append' => [\n        $this->Form->button('Button'),\n        $this->Form->dropdownButton('Dropdown', [\n            $this->Html->link('A', '#'),\n            $this->Html->link('B', '#'),\n            'divider',\n            $this->Html->link('C', '#')\n        ])\n    ]\n]) ;\n\n\n\n\n<div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <div class=\"input-group\">\n        <input type=\"text\" name=\"mail\" class=\"form-control \"  id=\"mail\" />\n        <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Button</button>\n            <div class=\"btn-group\">\n                <button data-toggle=\"dropdown\" class=\"dropdown-toggle btn btn-default\">Dropdown <span class=\"caret\"></span></button>\n                <ul class=\"dropdown-menu\">\n                    <li><a href=\"#\">A</a></li>\n                    <li><a href=\"#\">B</a></li>\n                    <li class=\"divider\"></li>\n                    <li><a href=\"#\">C</a></li>\n                </ul>\n            </div>\n        </span>\n    </div>\n</div>\n\n\n\n\n\n    \nMail\n\n    \n\n        \n\n        \n\n            \nButton\n\n            \n\n                \nDropdown \n\n                \n\n                    \nA\n\n                    \nB\n\n                    \n\n                    \nC\n\n                \n\n            \n\n        \n\n    \n\n\n\n\n\nAdd help message to inputs\n\n\nYou can add help messages to inputs by specifying the \nhelp\n option:\n\n\nPHP\nMarkup\nOutput\necho $this->Form->input('mail', [\n    'help' => 'Hey guy, you need some help?'\n]) ;\n\n\n\n\n<div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <input type=\"text\" name=\"mail\" class=\"form-control \" id=\"mail\" />\n    <p class=\"help-block\">Hey guy, you need some help?</p>\n</div>\n\n\n\n\n\n    \nMail\n\n    \n\n    \nHey guy, you need some help?",
            "title": "New input options"
        },
        {
            "location": "/form-helper/new-input-options/#prepend-or-append-content-to-inputs",
            "text": "You can prepend and append add-ons or buttons to inputs using custom options of the  Bootstrap.FormHelper::input  method.  PHP Markup Output echo $this->Form->input('mail', [\n    'prepend' => '@',\n    'append' => $this->Form->button('Send')\n]) ;  <div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <div class=\"input-group\">\n        <span class=\"input-group-addon\">@</span>\n        <input type=\"text\" name=\"mail\" class=\"form-control \" id=\"mail\" />\n        <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Send</button>\n        </span>\n    </div>\n</div>  \n     Mail \n     \n         @ \n         \n         \n             Send",
            "title": "Prepend or append content to inputs"
        },
        {
            "location": "/form-helper/new-input-options/#add-dropdown-buttons",
            "text": "You can easily prepend or append dropdown buttons to inputs by using custom options of the  Bootstrap.FormHelper::input  method\ncombined with the  Bootstrap.FormHelper::dropdown  method.  PHP Markup Output echo $this->Form->input('mail', [\n    'append' => [\n        $this->Form->button('Button'),\n        $this->Form->dropdownButton('Dropdown', [\n            $this->Html->link('A', '#'),\n            $this->Html->link('B', '#'),\n            'divider',\n            $this->Html->link('C', '#')\n        ])\n    ]\n]) ;  <div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <div class=\"input-group\">\n        <input type=\"text\" name=\"mail\" class=\"form-control \"  id=\"mail\" />\n        <span class=\"input-group-btn\">\n            <button class=\"btn btn-default\" type=\"submit\">Button</button>\n            <div class=\"btn-group\">\n                <button data-toggle=\"dropdown\" class=\"dropdown-toggle btn btn-default\">Dropdown <span class=\"caret\"></span></button>\n                <ul class=\"dropdown-menu\">\n                    <li><a href=\"#\">A</a></li>\n                    <li><a href=\"#\">B</a></li>\n                    <li class=\"divider\"></li>\n                    <li><a href=\"#\">C</a></li>\n                </ul>\n            </div>\n        </span>\n    </div>\n</div>  \n     Mail \n     \n         \n         \n             Button \n             \n                 Dropdown  \n                 \n                     A \n                     B \n                     \n                     C",
            "title": "Add dropdown buttons"
        },
        {
            "location": "/form-helper/new-input-options/#add-help-message-to-inputs",
            "text": "You can add help messages to inputs by specifying the  help  option:  PHP Markup Output echo $this->Form->input('mail', [\n    'help' => 'Hey guy, you need some help?'\n]) ;  <div class=\"form-group text\">\n    <label class=\" control-label\"  for=\"mail\">Mail</label>\n    <input type=\"text\" name=\"mail\" class=\"form-control \" id=\"mail\" />\n    <p class=\"help-block\">Hey guy, you need some help?</p>\n</div>  \n     Mail \n     \n     Hey guy, you need some help?",
            "title": "Add help message to inputs"
        },
        {
            "location": "/html-helper/icons/",
            "text": "Icons\n\n\nPHP\nMarkup\necho $this->Html->icon('pencil');\n\n\n\n\n<i class=\"glyphicon glyphicon-pencil\"></i>\n\n\n\n\nIcons - Easy icons\n\n\nSometimes, you may want to use the \nBootstrap.HtmlHelper::icon\n method in combination with other helpers such as \nBootstrap.PaginatorHelper\n\nor \nBootstrap.FormHelper\n to insert icons in buttons or other elements. To ease the process, some methods provide a shortcut to insert icons:\n\n\n// The following...\necho $this->Form->button($this->Html->icon('pencil'), ['escape' => false]);\n// ...can be easily rewritten as:\necho $this->Form->button('i:pencil');\n\n\n\n\nThis process is called \neasy icon\n, the easy icon format is \ni:icon-name\n where \nicon-name\n is the name of the icon (the name is not checked by the\nhelpers, so you can use custom icon names if you want). You can use easy icon in most methods of the Bootstrap helpers, if you find a method which does\nnot work, do not hesitate to open an issue so that I can add support for it!\n\n\nImportant:\n The helpers used internally by other helpers are linked to the \nView\n instance in CakePHP, this means that the easy-icon feature will\nonly work if the \nHtml\n helper associated with your \nView\n is \nBootstrap.Html\n (or a class with a \nicon()\n compatible method):\n\n\npublic $helpers = [\n    'Html', // Standard cakephp helper\n    'Form' => [\n        'className' => 'Bootstrap.Form'\n    ]\n];\n\necho $this->Form->button('i:pencil'); // Error: \\Cake\\View\\Helper\\HtmlHelper::icon does not exist!\n\n\n\n\nTip:\n To disable easy icon, simply do \n$this->MyHelper->easyIcon = false;\n (replace \nMyHelper\n by anything relevant).\n\n\nIcons - Custom set of icons\n\n\nIn Bootstrap 3, the default set of icons is \nGlyphicon\n, but the\nhelpers can be used to generate icons from any sets by customizing the \nicon\n template:\n\n\nPHP\nMarkup\necho $this->Html->icon('home');\n$this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}{{attrs.class}}\"{{attrs}}></i>'\n]);\necho $this->Html->icon('home');\n\n\n\n\n<i class=\"glyphicon glyphicon-pencil\"></i>\n<i class=\"fa fa-pencil\"></i>\n\n\n\n\nIf you want to use another set of icons with easy icon, you need to customize the templates of the \nHtml\n helper used by your views:\n\n\n$this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}{{attrs.class}}\"{{attrs}}></i>'\n]);",
            "title": "Creating icons"
        },
        {
            "location": "/html-helper/icons/#icons",
            "text": "PHP Markup echo $this->Html->icon('pencil');  <i class=\"glyphicon glyphicon-pencil\"></i>",
            "title": "Icons"
        },
        {
            "location": "/html-helper/icons/#icons-easy-icons",
            "text": "Sometimes, you may want to use the  Bootstrap.HtmlHelper::icon  method in combination with other helpers such as  Bootstrap.PaginatorHelper \nor  Bootstrap.FormHelper  to insert icons in buttons or other elements. To ease the process, some methods provide a shortcut to insert icons:  // The following...\necho $this->Form->button($this->Html->icon('pencil'), ['escape' => false]);\n// ...can be easily rewritten as:\necho $this->Form->button('i:pencil');  This process is called  easy icon , the easy icon format is  i:icon-name  where  icon-name  is the name of the icon (the name is not checked by the\nhelpers, so you can use custom icon names if you want). You can use easy icon in most methods of the Bootstrap helpers, if you find a method which does\nnot work, do not hesitate to open an issue so that I can add support for it!  Important:  The helpers used internally by other helpers are linked to the  View  instance in CakePHP, this means that the easy-icon feature will\nonly work if the  Html  helper associated with your  View  is  Bootstrap.Html  (or a class with a  icon()  compatible method):  public $helpers = [\n    'Html', // Standard cakephp helper\n    'Form' => [\n        'className' => 'Bootstrap.Form'\n    ]\n];\n\necho $this->Form->button('i:pencil'); // Error: \\Cake\\View\\Helper\\HtmlHelper::icon does not exist!  Tip:  To disable easy icon, simply do  $this->MyHelper->easyIcon = false;  (replace  MyHelper  by anything relevant).",
            "title": "Icons - Easy icons"
        },
        {
            "location": "/html-helper/icons/#icons-custom-set-of-icons",
            "text": "In Bootstrap 3, the default set of icons is  Glyphicon , but the\nhelpers can be used to generate icons from any sets by customizing the  icon  template:  PHP Markup echo $this->Html->icon('home');\n$this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}{{attrs.class}}\"{{attrs}}></i>'\n]);\necho $this->Html->icon('home');  <i class=\"glyphicon glyphicon-pencil\"></i>\n<i class=\"fa fa-pencil\"></i>  If you want to use another set of icons with easy icon, you need to customize the templates of the  Html  helper used by your views:  $this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}{{attrs.class}}\"{{attrs}}></i>'\n]);",
            "title": "Icons - Custom set of icons"
        },
        {
            "location": "/html-helper/labels-badges/",
            "text": "Labels\n\n\nPHP\nMarkup\nOutput\necho $this->Html->label('My Label', 'primary') ;\necho $this->Html->label('My Label', 'danger') ;\necho $this->Html->label('My Label', 'success') ;\n\n\n\n\n<span class=\"label label-primary\">My Label</span>\n<span class=\"label label-danger\">My Label</span>\n<span class=\"label label-success\">My Label</span>\n\n\n\n\nMy Label\n\n\nMy Label\n\n\nMy Label\n\n\nBadges\n\n\nPHP\nMarkup\nOutput\necho $this->Html->badge('1') ;\necho $this->Html->badge('2') ;\necho $this->Html->badge('3') ;\n\n\n\n\n<span class=\"badge\">1</span>\n<span class=\"badge\">2</span>\n<span class=\"badge\">3</span>\n\n\n\n\n1\n\n\n2\n\n\n3",
            "title": "Labels & Badges"
        },
        {
            "location": "/html-helper/labels-badges/#labels",
            "text": "PHP Markup Output echo $this->Html->label('My Label', 'primary') ;\necho $this->Html->label('My Label', 'danger') ;\necho $this->Html->label('My Label', 'success') ;  <span class=\"label label-primary\">My Label</span>\n<span class=\"label label-danger\">My Label</span>\n<span class=\"label label-success\">My Label</span>  My Label  My Label  My Label",
            "title": "Labels"
        },
        {
            "location": "/html-helper/labels-badges/#badges",
            "text": "PHP Markup Output echo $this->Html->badge('1') ;\necho $this->Html->badge('2') ;\necho $this->Html->badge('3') ;  <span class=\"badge\">1</span>\n<span class=\"badge\">2</span>\n<span class=\"badge\">3</span>  1  2  3",
            "title": "Badges"
        },
        {
            "location": "/html-helper/alerts/",
            "text": "Alerts\n\n\nPHP\nMarkup\nOutput\necho $this->Html->alert('This is a warning alert!') ;\necho $this->Html->alert('This is a success alert!', 'success');\necho $this->Html->alert('This is a info alert with a specific id!', [\n    'id' => 'alert-info',\n    'type' => 'info'\n]);\n\n\n\n\n<div class=\"alert alert-warning\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a warning alert!\n</div>\n<div class=\"alert alert-success\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a success alert!\n</div>\n<div id=\"alert-info\" class=\"alert alert-info\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a info alert with a specific id!\n</div>\n\n\n\n\n\n    \n\u00d7\n\n    This is a warning alert!\n\n\n\n\n\n    \n\u00d7\n\n    This is a success alert!\n\n\n\n\n\n    \n\u00d7\n\n    This is a info alert with a specific id!",
            "title": "Alerts"
        },
        {
            "location": "/html-helper/alerts/#alerts",
            "text": "PHP Markup Output echo $this->Html->alert('This is a warning alert!') ;\necho $this->Html->alert('This is a success alert!', 'success');\necho $this->Html->alert('This is a info alert with a specific id!', [\n    'id' => 'alert-info',\n    'type' => 'info'\n]);  <div class=\"alert alert-warning\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a warning alert!\n</div>\n<div class=\"alert alert-success\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a success alert!\n</div>\n<div id=\"alert-info\" class=\"alert alert-info\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button>\n    This is a info alert with a specific id!\n</div>  \n     \u00d7 \n    This is a warning alert!  \n     \u00d7 \n    This is a success alert!  \n     \u00d7 \n    This is a info alert with a specific id!",
            "title": "Alerts"
        },
        {
            "location": "/html-helper/getcrumblist/",
            "text": "getCrumbList\n\n\nOverload of \nCake\\View\\Helper\\HTMLHelper::getCrumbList\n.\n\n\nPHP\nMarkup\nOutput\n$this->Html->addCrumb('Home', '/');\n$this->Html->addCrumb('Pages', ['controller' => 'pages']);\n$this->Html->addCrumb('About', ['controller' => 'pages', 'action' => 'about']);\necho $this->Html->getCrumbList();\n\n\n\n\n<ul class=\"breadcrumb\">\n    <li class=\"first\"><a href=\"/\">Home</a></li>\n    <li><a href=\"/pages\">Pages</a></li>\n    <li class=\"last\"><a href=\"/pages/about\">About</a></li>\n</ul>\n\n\n\n\n\n    \nHome\n\n    \nPages\n\n    \nAbout",
            "title": "getCrumbList"
        },
        {
            "location": "/html-helper/getcrumblist/#getcrumblist",
            "text": "Overload of  Cake\\View\\Helper\\HTMLHelper::getCrumbList .  PHP Markup Output $this->Html->addCrumb('Home', '/');\n$this->Html->addCrumb('Pages', ['controller' => 'pages']);\n$this->Html->addCrumb('About', ['controller' => 'pages', 'action' => 'about']);\necho $this->Html->getCrumbList();  <ul class=\"breadcrumb\">\n    <li class=\"first\"><a href=\"/\">Home</a></li>\n    <li><a href=\"/pages\">Pages</a></li>\n    <li class=\"last\"><a href=\"/pages/about\">About</a></li>\n</ul>  \n     Home \n     Pages \n     About",
            "title": "getCrumbList"
        },
        {
            "location": "/modal-helper/basics/",
            "text": "Basic usage\n\n\nThe Bootstrap 3 modal helper allow you to easily create modal without having to write bunch of html code. The basic way of using this helper this\nby creating a modal with a title, then adding the body using standard PHP/HTML and then closing the modals with or without buttons.\n\n\nPHP\nMarkup\n\n    \nShow Modal\n\n\n\n\n\nExample 1 - Simple header & footer, custom body\nHere I write the body of my modal !\nSubmit\nClose\n\n\n\n<?php\n    // Start a modal with a title, default value for 'close' is true\n    echo $this->Modal->create(\"My Modal Form\", ['id' => 'MyModal1', 'close' => false]) ; \n?>\n<p>Here I write the body of my modal !</p>\n<?php\n    // Close the modal, output a footer with a 'close' button\n    echo $this->Modal->end() ;\n    // It is possible to specify custom buttons:\n    echo $this->Modal->end([\n        $this->Form->button('Submit', ['bootstrap-type' => 'primary']),   \n        $this->Form->button('Close', ['data-dismiss' => 'modal']) \n    ]);\n?>\n\n\n\n\n<div id=\"MyModal1\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" aria-labbeledby=\"MyModal1Label\" class=\"modal fade\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header \">\n                <!-- With 'close' => true, or without specifying:\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button> -->\n                <h4 class=\"modal-title\" id=\"MyModal1Label\">Example 1 - Simple header & footer, custom body</h4>\n            </div>\n            <div class=\"modal-body \">    \n                <p>Here I write the body of my modal !</p>\n            </div>\n            <div class=\"modal-footer \">\n                <button class=\"btn btn-primary btn-primary\" type=\"submit\">Submit</button>\n                <button data-dismiss=\"modal\" class=\"btn btn-default\" type=\"submit\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>",
            "title": "Basic usage"
        },
        {
            "location": "/modal-helper/basics/#basic-usage",
            "text": "The Bootstrap 3 modal helper allow you to easily create modal without having to write bunch of html code. The basic way of using this helper this\nby creating a modal with a title, then adding the body using standard PHP/HTML and then closing the modals with or without buttons.  PHP Markup \n     Show Modal",
            "title": "Basic usage"
        },
        {
            "location": "/modal-helper/no-html/",
            "text": "Without HTML\n\n\nYou can directly set the content of the body of your modal using the \nbody\n method.\n\n\nPHP\nMarkup\n\n    \nShow Modal\n\n\n\n\n\n\u00d7\nExample 2 - No HTML\nMy body... !\nSubmit\nClose\n\n\n\n<?php\n    $content = \"<p>My body... !</p>\";\n    echo $this->Modal->create(['id' => 'MyModal2']) ;\n    echo $this->Modal->header('Example 2 - No HTML', ['close' => false]) ; \n    echo $this->Modal->body($content, ['class' => 'my-body-class']) ;\n    echo $this->Modal->footer([\n        $this->Form->button('Submit', ['bootstrap-type' => 'primary']),   \n        $this->Form->button('Close', ['data-dismiss' => 'modal']) \n    ]) ;\n    echo $this->Modal->end() ;\n?>\n\n\n\n\n<div id=\"MyModal2\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" aria-labbeledby=\"MyModal2Label\" class=\"modal fade \">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header \">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                <h4 class=\"modal-title\" id=\"MyModal2Label\">Example 2 - No HTML</h4>\n            </div>\n            <div class=\"modal-body my-body-class\">\n                <p>My body... !</p>\n            </div>\n            <div class=\"modal-footer \">\n                <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n                <button data-dismiss=\"modal\" class=\"btn btn-default\" type=\"submit\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>",
            "title": "Without HTML"
        },
        {
            "location": "/modal-helper/no-html/#without-html",
            "text": "You can directly set the content of the body of your modal using the  body  method.  PHP Markup \n     Show Modal   \u00d7",
            "title": "Without HTML"
        },
        {
            "location": "/modal-helper/custom/",
            "text": "Fully customized modals\n\n\nYou can also fully customize the various parts of the modal.\n\n\nPHP\nMarkup\n\n    \nShow Modal\n\n\n\n\n\n\u00d7\nMy Header!\nMy body!\nMy footer... Oops, no buttons!\n\n\n\n<?php\n    echo $this->Modal->create(['id' => 'MyModal4']) ;\n    echo $this->Modal->body() ; // No header\n    echo $this->Modal->footer() ; // Footer with close button (default)\n    echo $this->Modal->end() ;\n?>\n\n\n\n\n<div id=\"MyModal4\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" class=\"modal fade \">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n            <div class=\"modal-body \">\n            </div>\n            <div class=\"modal-footer \">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>",
            "title": "Fully customized modals"
        },
        {
            "location": "/modal-helper/custom/#fully-customized-modals",
            "text": "You can also fully customize the various parts of the modal.  PHP Markup \n     Show Modal   \u00d7",
            "title": "Fully customized modals"
        },
        {
            "location": "/navbar-helper/basics/",
            "text": "Create a Bootstrap navbar\n\n\nThe \nBootstrap.NavbarHelper\n works in a similar way to the standard form helper, you first need to load it:\n\n\npublic $helpers = [\n    'Navbar' => [\n        'className' => 'Bootstrap.NavbarHelper',\n        'autoActiveLink' => true // This is the default value, see below for more information.\n    ]\n];\n\n\n\n\nYou are now ready to create your navbar, see the basic example below.\n\n\nPHP\nMarkup\nOutput\necho $this->Navbar->create('Holt59', ['fixed' => 'top', 'inverse' => true]);\necho $this->Navbar->beginMenu();\n    echo $this->Navbar->link('Link', '/', ['class' => 'active']);\n    echo $this->Navbar->link('Blog', ['controller' => 'pages', 'action' => 'test']);\n    echo $this->Navbar->beginMenu('Dropdown');\n        echo $this->Navbar->header('Header 1');\n        echo $this->Navbar->link('Action');\n        echo $this->Navbar->link('Another action');\n        echo $this->Navbar->link('Something else here');\n        echo $this->Navbar->divider();\n        echo $this->Navbar->header('Header 2');\n        echo $this->Navbar->link('Another action');\n    echo $this->Navbar->endMenu();\necho $this->Navbar->endMenu();\necho $this->Navbar->searchForm();\necho $this->Navbar->text('Signed in as <a href=\"#\" class=\"classtest\">Holt59</a>, <a href=\"#\">Log Out</a>');\necho $this->Navbar->end();\n\n\n\n\n<nav class=\"navbar navbar-inverse navbar-fixed-top\">\n    <div class=\"container\">\n        <div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle navigation</span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span></button><a href=\"/\" class=\"navbar-brand\">Holt59</a></div>\n        <div class=\"collapse navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n                <li class=\"active\"><a href=\"#\">Link</a></li>\n                <li><a href=\"#\">Blog</a></li>\n                <li class=\"dropdown\">\n                    <a href=\"#\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" class=\"dropdown-toggle\">Dropdown<span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <li class=\"dropdown-header\">Header 1</li>\n                        <li><a href=\"#\">Action</a></li>\n                        <li><a href=\"#\">Another action</a></li>\n                        <li><a href=\"#\">Something else here</a></li>\n                        <li class=\"divider\" role=\"separator\"></li>\n                        <li class=\"dropdown-header\">Header 2</li>\n                        <li><a href=\"#\">Another action</a></li>\n                    </ul>\n                </li>\n            </ul><!--\n            <form method=\"post\" accept-charset=\"utf-8\" class=\"navbar-form navbar-left form-search\" role=\"form\" action=\"/\">\n                <div style=\"display:none;\"><input type=\"hidden\" name=\"_method\" class=\"form-control\"  value=\"POST\" /></div>\n                <div class=\"form-group text\">\n                    <div class=\"input-group\"><input type=\"text\" name=\"search\" class=\"form-control\"  id=\"search\" placeholder=\"Search... \" /><span class=\"input-group-btn\"><button class=\"btn btn-default\" type=\"submit\">Search</button></span></div>\n                </div>\n            </form>-->\n            <p class=\"navbar-text\">Signed in as <a href=\"#\" class=\"classtest navbar-link\">Holt59</a>, <a href=\"#\" class=\"navbar-link\">Log Out</a></p>\n        </div>\n    </div>\n</nav>\n\n\n\n\n\n    \n\n        \nToggle navigation\nHolt59\n\n        \n\n            \n\n                \nLink\n\n                \nBlog\n\n                \n\n                    \nDropdown\n\n                    \n\n                        \nHeader 1\n\n                        \nAction\n\n                        \nAnother action\n\n                        \nSomething else here\n\n                        \n\n                        \nHeader 2\n\n                        \nAnother action\n\n                    \n\n                \n\n            \n\n            \nSigned in as \nHolt59\n, \nLog Out",
            "title": "Basic usage"
        },
        {
            "location": "/navbar-helper/basics/#create-a-bootstrap-navbar",
            "text": "The  Bootstrap.NavbarHelper  works in a similar way to the standard form helper, you first need to load it:  public $helpers = [\n    'Navbar' => [\n        'className' => 'Bootstrap.NavbarHelper',\n        'autoActiveLink' => true // This is the default value, see below for more information.\n    ]\n];  You are now ready to create your navbar, see the basic example below.  PHP Markup Output echo $this->Navbar->create('Holt59', ['fixed' => 'top', 'inverse' => true]);\necho $this->Navbar->beginMenu();\n    echo $this->Navbar->link('Link', '/', ['class' => 'active']);\n    echo $this->Navbar->link('Blog', ['controller' => 'pages', 'action' => 'test']);\n    echo $this->Navbar->beginMenu('Dropdown');\n        echo $this->Navbar->header('Header 1');\n        echo $this->Navbar->link('Action');\n        echo $this->Navbar->link('Another action');\n        echo $this->Navbar->link('Something else here');\n        echo $this->Navbar->divider();\n        echo $this->Navbar->header('Header 2');\n        echo $this->Navbar->link('Another action');\n    echo $this->Navbar->endMenu();\necho $this->Navbar->endMenu();\necho $this->Navbar->searchForm();\necho $this->Navbar->text('Signed in as <a href=\"#\" class=\"classtest\">Holt59</a>, <a href=\"#\">Log Out</a>');\necho $this->Navbar->end();  <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n    <div class=\"container\">\n        <div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle navigation</span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span></button><a href=\"/\" class=\"navbar-brand\">Holt59</a></div>\n        <div class=\"collapse navbar-collapse\">\n            <ul class=\"nav navbar-nav\">\n                <li class=\"active\"><a href=\"#\">Link</a></li>\n                <li><a href=\"#\">Blog</a></li>\n                <li class=\"dropdown\">\n                    <a href=\"#\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" class=\"dropdown-toggle\">Dropdown<span class=\"caret\"></span></a>\n                    <ul class=\"dropdown-menu\">\n                        <li class=\"dropdown-header\">Header 1</li>\n                        <li><a href=\"#\">Action</a></li>\n                        <li><a href=\"#\">Another action</a></li>\n                        <li><a href=\"#\">Something else here</a></li>\n                        <li class=\"divider\" role=\"separator\"></li>\n                        <li class=\"dropdown-header\">Header 2</li>\n                        <li><a href=\"#\">Another action</a></li>\n                    </ul>\n                </li>\n            </ul><!--\n            <form method=\"post\" accept-charset=\"utf-8\" class=\"navbar-form navbar-left form-search\" role=\"form\" action=\"/\">\n                <div style=\"display:none;\"><input type=\"hidden\" name=\"_method\" class=\"form-control\"  value=\"POST\" /></div>\n                <div class=\"form-group text\">\n                    <div class=\"input-group\"><input type=\"text\" name=\"search\" class=\"form-control\"  id=\"search\" placeholder=\"Search... \" /><span class=\"input-group-btn\"><button class=\"btn btn-default\" type=\"submit\">Search</button></span></div>\n                </div>\n            </form>-->\n            <p class=\"navbar-text\">Signed in as <a href=\"#\" class=\"classtest navbar-link\">Holt59</a>, <a href=\"#\" class=\"navbar-link\">Log Out</a></p>\n        </div>\n    </div>\n</nav>  \n     \n         Toggle navigation Holt59 \n         \n             \n                 Link \n                 Blog \n                 \n                     Dropdown \n                     \n                         Header 1 \n                         Action \n                         Another action \n                         Something else here \n                         \n                         Header 2 \n                         Another action \n                     \n                 \n             \n             Signed in as  Holt59 ,  Log Out",
            "title": "Create a Bootstrap navbar"
        },
        {
            "location": "/navbar-helper/auto-active-link/",
            "text": "Description of the feature\n\n\nThe \nautoActiveLink\n configuration option allows the navbar helper to deduce the active link automatically and add an \nactive\n class to the\nsurrounding \n<li>\n element.\n\n\nEnabling the feature\n\n\nThe feature is enabled by default, you can enable or disable it by doing:\n\n\n$this->Navbar->setConfig('autoActiveLink', false);\n$this->Navbar->setConfig('autoActiveLink', true);\n\n\n\n\nWhen the feature is disable, you can always specify the \nactive\n option to the \nNavbarHelper::link()\n method:\n\n\necho $this->Navbar->link('Link', $url, ['active' => true]);\n\n\n\n\nThe \nactive\n option will always override the automatic value, even when \nautoActiveLink\n is \ntrue\n:\n\n\n$this->Navbar->setConfig('autoActiveLink', true);\necho $this->Navbar->link('Link', $url);\n// '<li class=\"active\">...</li>\necho $this->Navbar->link('Link', $url, ['active' => false]);\n// '<li>...</li>\n\n\n\n\nExplanation of the deduction\n\n\nThe \nautoActiveLink\n feature rely on the \nUrlComparerTrait::compareUrls()\n method and do not compare URL strictly, it rather\ncheck if the first URL is the root path of the second.\n\n\nBelow is a list of combinations to better understand the feature:\n\n\n\n    \n\n        \n\n            \nLink URL\n\n            \nNormalized\n\n            \nCurrent URL\n\n            \nNormalized\n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n    \n['controller' => 'Pages',\n     'action' => 'display', 'faq']\n\n            \n/pages/display/faq\n\n            \n/pages/faq\n\n            \n/pages/display/faq\n\n            \n\n        \n\n        \n\n            \n/pages/credits\n\n            \n/pages/display/credits\n\n            \n\n        \n\n        \n\n            \n\n    \n['controller' => 'Users',\n     'action' => 'edit']\n\n            \n/users/edit\n\n            \n/users/edit/1\n\n            \n/users/edit/1\n\n            \n\n        \n\n        \n\n            \n/users/edit\n\n            \n/users/edit\n\n            \n\n        \n\n        \n\n        \n\n    \n['controller' => 'Users',\n     'action' => 'index']\n\n            \n/users/index\n\n            \n/users\n\n            \n/users/index\n\n            \n\n        \n\n        \n\n            \n/users/edit\n\n            \n/users/edit\n\n            \n\n        \n\n        \n\n\n\n\n\nThe query parameters (\n?\n) and the anchor (\n#\n) are never used for comparison.\n\n\nCustomizing the comparison\n\n\nWhen calling the \nlink()\n method, you can pass an array as the \nactive\n options to customize the way the comparison is made. This\narray should contains which part of the URL you want to include in the left part of the comparison. Below is an example that removes\nthe passed parameters and the action:\n\n\necho $this->Navbar->link($name, $url, [\n    'active' => [\n        'action' => false,\n        'pass' => false\n    ];\n]);\n\n\n\n\nNow:\n\n\n\n    \n\n        \n\n            \nLink URL\n\n            \nNormalized\n\n            \nCurrent URL\n\n            \nNormalized\n\n            \n\n        \n\n    \n\n    \n\n        \n\n        \n\n    \n['controller' => 'Users',\n     'action' => 'index']\n\n            \n/users/index\n\n            \n/users\n\n            \n/users/index\n\n            \n\n        \n\n        \n\n            \n/users/edit\n\n            \n/users/edit\n\n            \n\n        \n\n        \n\n\n\n\n\nNotice that the \n/users\n URL now matches the \n/users/edit\n URL. The possible keys in the array are defined by the \nUrlComparerTrait::_parts\n\nproperty:\n\n\npublic $_parts = ['plugin', 'prefix', 'controller', 'action', 'pass'];;",
            "title": "Automatic \"active\" link"
        },
        {
            "location": "/navbar-helper/auto-active-link/#description-of-the-feature",
            "text": "The  autoActiveLink  configuration option allows the navbar helper to deduce the active link automatically and add an  active  class to the\nsurrounding  <li>  element.",
            "title": "Description of the feature"
        },
        {
            "location": "/navbar-helper/auto-active-link/#enabling-the-feature",
            "text": "The feature is enabled by default, you can enable or disable it by doing:  $this->Navbar->setConfig('autoActiveLink', false);\n$this->Navbar->setConfig('autoActiveLink', true);  When the feature is disable, you can always specify the  active  option to the  NavbarHelper::link()  method:  echo $this->Navbar->link('Link', $url, ['active' => true]);  The  active  option will always override the automatic value, even when  autoActiveLink  is  true :  $this->Navbar->setConfig('autoActiveLink', true);\necho $this->Navbar->link('Link', $url);\n// '<li class=\"active\">...</li>\necho $this->Navbar->link('Link', $url, ['active' => false]);\n// '<li>...</li>",
            "title": "Enabling the feature"
        },
        {
            "location": "/navbar-helper/auto-active-link/#explanation-of-the-deduction",
            "text": "The  autoActiveLink  feature rely on the  UrlComparerTrait::compareUrls()  method and do not compare URL strictly, it rather\ncheck if the first URL is the root path of the second.  Below is a list of combinations to better understand the feature:  \n     \n         \n             Link URL \n             Normalized \n             Current URL \n             Normalized \n             \n         \n     \n     \n         \n             \n     ['controller' => 'Pages',\n     'action' => 'display', 'faq'] \n             /pages/display/faq \n             /pages/faq \n             /pages/display/faq \n             \n         \n         \n             /pages/credits \n             /pages/display/credits \n             \n         \n         \n             \n     ['controller' => 'Users',\n     'action' => 'edit'] \n             /users/edit \n             /users/edit/1 \n             /users/edit/1 \n             \n         \n         \n             /users/edit \n             /users/edit \n             \n         \n         \n         \n     ['controller' => 'Users',\n     'action' => 'index'] \n             /users/index \n             /users \n             /users/index \n             \n         \n         \n             /users/edit \n             /users/edit \n             \n         \n           The query parameters ( ? ) and the anchor ( # ) are never used for comparison.",
            "title": "Explanation of the deduction"
        },
        {
            "location": "/navbar-helper/auto-active-link/#customizing-the-comparison",
            "text": "When calling the  link()  method, you can pass an array as the  active  options to customize the way the comparison is made. This\narray should contains which part of the URL you want to include in the left part of the comparison. Below is an example that removes\nthe passed parameters and the action:  echo $this->Navbar->link($name, $url, [\n    'active' => [\n        'action' => false,\n        'pass' => false\n    ];\n]);  Now:  \n     \n         \n             Link URL \n             Normalized \n             Current URL \n             Normalized \n             \n         \n     \n     \n         \n         \n     ['controller' => 'Users',\n     'action' => 'index'] \n             /users/index \n             /users \n             /users/index \n             \n         \n         \n             /users/edit \n             /users/edit \n             \n         \n           Notice that the  /users  URL now matches the  /users/edit  URL. The possible keys in the array are defined by the  UrlComparerTrait::_parts \nproperty:  public $_parts = ['plugin', 'prefix', 'controller', 'action', 'pass'];;",
            "title": "Customizing the comparison"
        },
        {
            "location": "/panel-helper/basics/",
            "text": "Create a Bootstrap panel\n\n\nThe \nBootstrap.PanelHelper\n works in a similar way to the standard modal helper, you first need to load the helper:\n\n\npublic $helpers = [\n    'Panel' => [\n        'className' => 'Bootstrap.PanelHelper'\n    ]\n];\n\n\n\n\nBelow is a basic example:\n\n\nphp\nMarkup\nOutput\necho $this->Panel->create('My Panel Heading');\n?>\n<p>Here I can write my panel content... </p>\n<?php\necho $this->Panel->end();\n\n\n\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\">My Panel Heading</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n\n\n\n\n\n\n    \n\n        \nMy Panel Heading\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\nCreating fancy panels\n\n\nYou can customize your panel easily by specifying the \ntype\n option and using \neasy icons\n in\nyour headings:\n\n\nphp\nMarkup\nOutput\necho $this->Panel->create('i:home Home');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:cloud My Cloud', ['type' => 'primary']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:book My Books', ['type' => 'success']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:user My Profile', ['type' => 'danger']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\n\n\n\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-home\"></i> Home</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-cloud\"></i> My Cloud</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-success\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-book\"></i> My Books</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-danger\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-user\"></i> My Profile</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \n Home\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\n\n    \n\n        \n My Cloud\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\n\n    \n\n        \n My Books\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\n\n    \n\n        \n My Profile\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\nPlaying with the panel parts\n\n\nA panel is made of three part: a header, a body and a footer. If you specify a title to the \ncreate()\n method, a header is\nautomatically created and a body opened (except if you specify the \n'body' => false\n option). The \nBootstrap.PanelHelper\n will\nautomatically close any part when you create or open a new one, or when you end the panel.\n\n\nphp\nMarkup\nOutput\necho $this->Panel->create(); // No heading...\necho $this->Panel->body(); // ...so you need to open the next part manually.\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\n\necho $this->Panel->create(); // No heading...\necho $this->Panel->header(); // ...but you can still have one!\necho '<h4>My Title</h4>';\necho $this->Panel->body(); // The previous part is automatically close!\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->footer(); // And you can add a footer!\necho '<p>Some footer content... </p>';\necho $this->Panel->end();\n\n\n\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4>My Title</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n    <div class=\"panel-footer\">\n        <p>Some footer content... </p>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n\n\n\n\n\n    \n\n        \nMy Title\n\n    \n\n    \n\n        \nHere I can write my panel content... \n\n    \n\n    \n\n        \nSome footer content...",
            "title": "Basic usage"
        },
        {
            "location": "/panel-helper/basics/#create-a-bootstrap-panel",
            "text": "The  Bootstrap.PanelHelper  works in a similar way to the standard modal helper, you first need to load the helper:  public $helpers = [\n    'Panel' => [\n        'className' => 'Bootstrap.PanelHelper'\n    ]\n];  Below is a basic example:  php Markup Output echo $this->Panel->create('My Panel Heading');\n?>\n<p>Here I can write my panel content... </p>\n<?php\necho $this->Panel->end();  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\">My Panel Heading</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>",
            "title": "Create a Bootstrap panel"
        },
        {
            "location": "/panel-helper/basics/#creating-fancy-panels",
            "text": "You can customize your panel easily by specifying the  type  option and using  easy icons  in\nyour headings:  php Markup Output echo $this->Panel->create('i:home Home');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:cloud My Cloud', ['type' => 'primary']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:book My Books', ['type' => 'success']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\necho $this->Panel->create('i:user My Profile', ['type' => 'danger']);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-home\"></i> Home</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-cloud\"></i> My Cloud</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-success\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-book\"></i> My Books</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n<div class=\"panel panel-danger\">\n    <div class=\"panel-heading\">\n        <h4 class=\"panel-title\"><i aria-hidden=\"true\" class=\"glyphicon glyphicon-user\"></i> My Profile</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>",
            "title": "Creating fancy panels"
        },
        {
            "location": "/panel-helper/basics/#playing-with-the-panel-parts",
            "text": "A panel is made of three part: a header, a body and a footer. If you specify a title to the  create()  method, a header is\nautomatically created and a body opened (except if you specify the  'body' => false  option). The  Bootstrap.PanelHelper  will\nautomatically close any part when you create or open a new one, or when you end the panel.  php Markup Output echo $this->Panel->create(); // No heading...\necho $this->Panel->body(); // ...so you need to open the next part manually.\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->end();\n\necho $this->Panel->create(); // No heading...\necho $this->Panel->header(); // ...but you can still have one!\necho '<h4>My Title</h4>';\necho $this->Panel->body(); // The previous part is automatically close!\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->footer(); // And you can add a footer!\necho '<p>Some footer content... </p>';\necho $this->Panel->end();  <div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n</div>\n\n<div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n        <h4>My Title</h4>\n    </div>\n    <div class=\"panel-body\">\n        <p>Here I can write my panel content... </p>\n    </div>\n    <div class=\"panel-footer\">\n        <p>Some footer content... </p>\n    </div>\n</div>  \n     \n         Here I can write my panel content...",
            "title": "Playing with the panel parts"
        },
        {
            "location": "/panel-helper/groups/",
            "text": "Panel Groups\n\n\nYou can create (collapsible) panel groups easily using the \nBootstrap.PanelHelper\n:\n\n\nphp\nMarkup\nOutput\necho $this->Panel->startGroup();\necho $this->Panel->create('My Panel 1');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 2'); // You don't need to close the previous panel!\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 3');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->endGroup();\n\n\n\n\n<div role=\"tablist\" aria-multiselectable=\"1\" id=\"panelGroup-1\" class=\"panel-group\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-0\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-0\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"true\" aria-controls=\"#collapse-0\">My Panel 1</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-0\" id=\"collapse-0\" class=\"panel-collapse collapse in\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-1\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-1\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"false\" aria-controls=\"#collapse-1\">My Panel 2</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-1\" id=\"collapse-1\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-2\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-2\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"false\" aria-controls=\"#collapse-2\">My Panel 3</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-2\" id=\"collapse-2\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \n\n            \nMy Panel 1\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 2\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 3\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n\n\n\n\nThe \nid\n of the panel group is automatically generated by default, you can customize it by passing the \nid\n option to the \nstartGroup()\n method:\n\n\necho $this->Panel->startGroup(['id' => 'my-custom-id']);\n\n\n\n\nIf you do not want the first panel to be open, you can set the \n'open' => false\n option and then use \n'open' => true\n when creating a panel:\n\n\nPHP\nMarkup\nOutput\necho $this->Panel->startGroup(['open' => false]);\necho $this->Panel->create('My Panel 1');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 2', ['open' => true]);\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 3');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->endGroup();\n\n\n\n\n<div role=\"tablist\" aria-multiselectable=\"1\" id=\"panelGroup-3\" class=\"panel-group\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-3\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-3\" data-toggle=\"collapse\" data-parent=\"#panelGroup-3\" aria-expanded=\"false\" aria-controls=\"#collapse-3\">My Panel 1</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-3\" id=\"collapse-3\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-4\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-4\" data-toggle=\"collapse\" data-parent=\"#panelGroup-3\" aria-expanded=\"true\" aria-controls=\"#collapse-4\">My Panel 2</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-4\" id=\"collapse-4\" class=\"panel-collapse collapse in\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-5\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-5\" data-toggle=\"collapse\" data-parent=\"#panelGroup-3\" aria-expanded=\"false\" aria-controls=\"#collapse-5\">My Panel 3</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-5\" id=\"collapse-5\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \n\n            \nMy Panel 1\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 2\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 3\n\n        \n\n        \n\n            \n\n                \nHere I can write my panel content... \n\n            \n\n        \n\n    \n\n\n\n\n\nNon collapsible groups\n\n\nThe panel are collapsible by default, but you can have non collapsible panels if you want:\n\n\nPHP\nMarkup\nOutput\necho $this->Panel->startGroup(['collapsible' => false]);\necho $this->Panel->create('My Panel 1');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 2');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 3');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->endGroup();\n\n\n\n\n<div role=\"tablist\" aria-multiselectable=\"1\" id=\"panelGroup-2\" class=\"panel-group\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 1</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 2</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 3</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n    \n\n        \n\n            \nMy Panel 1\n\n        \n\n        \n\n            \nHere I can write my panel content... \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 2\n\n        \n\n        \n\n            \nHere I can write my panel content... \n\n        \n\n    \n\n    \n\n        \n\n            \nMy Panel 3\n\n        \n\n        \n\n            \nHere I can write my panel content...",
            "title": "Panel groups"
        },
        {
            "location": "/panel-helper/groups/#panel-groups",
            "text": "You can create (collapsible) panel groups easily using the  Bootstrap.PanelHelper :  php Markup Output echo $this->Panel->startGroup();\necho $this->Panel->create('My Panel 1');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 2'); // You don't need to close the previous panel!\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 3');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->endGroup();  <div role=\"tablist\" aria-multiselectable=\"1\" id=\"panelGroup-1\" class=\"panel-group\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-0\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-0\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"true\" aria-controls=\"#collapse-0\">My Panel 1</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-0\" id=\"collapse-0\" class=\"panel-collapse collapse in\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-1\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-1\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"false\" aria-controls=\"#collapse-1\">My Panel 2</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-1\" id=\"collapse-1\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\" id=\"heading-2\">\n            <h4 class=\"panel-title\"><a href=\"#collapse-2\" data-toggle=\"collapse\" data-parent=\"#panelGroup-1\" aria-expanded=\"false\" aria-controls=\"#collapse-2\">My Panel 3</a></h4>\n        </div>\n        <div role=\"tabpanel\" aria-labelledby=\"heading-2\" id=\"collapse-2\" class=\"panel-collapse collapse\">\n            <div class=\"panel-body\">\n                <p>Here I can write my panel content... </p>\n            </div>\n        </div>\n    </div>\n</div>",
            "title": "Panel Groups"
        },
        {
            "location": "/panel-helper/groups/#non-collapsible-groups",
            "text": "The panel are collapsible by default, but you can have non collapsible panels if you want:  PHP Markup Output echo $this->Panel->startGroup(['collapsible' => false]);\necho $this->Panel->create('My Panel 1');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 2');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->create('My Panel 3');\necho '<p>Here I can write my panel content... </p>';\necho $this->Panel->endGroup();  <div role=\"tablist\" aria-multiselectable=\"1\" id=\"panelGroup-2\" class=\"panel-group\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 1</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 2</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">My Panel 3</h4>\n        </div>\n        <div class=\"panel-body\">\n            <p>Here I can write my panel content... </p>\n        </div>\n    </div>\n</div>",
            "title": "Non collapsible groups"
        },
        {
            "location": "/faq/",
            "text": "Frequently Asked Questions\n\n\n\n\nMy site does not look like Bootstrap, why?\n\n\nIf you loaded the helpers correctly, check that you correctly include the stylesheets and\nscripts from Bootstrap, since the helpers do not include them automatically.\n\n\n\n\nWhere have the \nfaIcon\n and \nglIcon\n methods gone?\n\n\nThe \nfaIcon\n and \nglIcon\n have been dropped in 3.1.0, alongside with the \nuseFontAwesone\n option. If you\nwant to use a custom set of icons, you can customize the \nicon\n template:\n\n\n$this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}\"></i>'\n]);\n\n\n\n\n\n\nI cannot use easy icon, why?\n\n\nThe easy icon features relies on the \nBootstrap.Html\n helper, so it only works if the \nHtml\n helper\nassociated to your view is \nBootstrap.Html\n:\n\n\npublic $helpers = [\n    'Html' => [\n        'className' => 'Bootstrap.Html'\n    ]\n];",
            "title": "FAQ"
        },
        {
            "location": "/faq/#frequently-asked-questions",
            "text": "",
            "title": "Frequently Asked Questions"
        },
        {
            "location": "/faq/#my-site-does-not-look-like-bootstrap-why",
            "text": "If you loaded the helpers correctly, check that you correctly include the stylesheets and\nscripts from Bootstrap, since the helpers do not include them automatically.",
            "title": "My site does not look like Bootstrap, why?"
        },
        {
            "location": "/faq/#where-have-the-faicon-and-glicon-methods-gone",
            "text": "The  faIcon  and  glIcon  have been dropped in 3.1.0, alongside with the  useFontAwesone  option. If you\nwant to use a custom set of icons, you can customize the  icon  template:  $this->Html->templates([\n    'icon' => '<i class=\"fa fa-{{type}}\"></i>'\n]);",
            "title": "Where have the faIcon and glIcon methods gone?"
        },
        {
            "location": "/faq/#i-cannot-use-easy-icon-why",
            "text": "The easy icon features relies on the  Bootstrap.Html  helper, so it only works if the  Html  helper\nassociated to your view is  Bootstrap.Html :  public $helpers = [\n    'Html' => [\n        'className' => 'Bootstrap.Html'\n    ]\n];",
            "title": "I cannot use easy icon, why?"
        }
    ]
}